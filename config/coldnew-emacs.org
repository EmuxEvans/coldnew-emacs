#+TITLE: coldnew emacs config
#+AUTHOR: coldnew
#+email: coldnew.tw at gmail.com
#+OPTIONS: H:2 num:nil toc:t

* Basic Setup
** User-interface
*** startup-message
Do not use startup messages.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
*** scratch-message
Make scratch buffer contain nothing.
#+begin_src emacs-lisp
  (setq initial-scratch-message "")
#+end_src
*** Visible bell
Use visible bell instead of ring-bell.
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
*** Tool bar
Disable toolbar
#+begin_src emacs-lisp
  (if (featurep 'tool-bar) (tool-bar-mode -1))
#+end_src
*** Scroll bar
Disable scrollbar
#+begin_src emacs-lisp
  (if (featurep 'scroll-bar) (scroll-bar-mode -1))
#+end_src


** Variable

*** Operation System Testing
#+begin_src emacs-lisp
  (defvar mac-p     (eq system-type 'darwin)
    "Return nil if OS is not Mac.")
  (defvar linux-p   (and (eq system-type 'gnu/linux) (not (eq system-type 'drawin)))
    "Return nil if OS is not Linux.")
  (defvar cygwin-p  (eq system-type 'cygwin)
    "Return nil if OS is not CygWin.")
  (defvar windows-p (eq system-type 'windows-nt)
    "Return nil if OS is not Windows.")
  (defvar linux-64bit-p (and (string-match (rx bos "x86_64") system-configuration) linux-p)
    "Return nil if OS is not 64-bit linux.")
    (defvar linux-32bit-p (and (string-match (rx bos "x86-") system-configuration) linux-p)
    "Return nil if OS is not 32-bit linux.")
#+end_src

*** User Testing
#+begin_src emacs-lisp
(defvar root-p (zerop (user-real-uid))
  "Return nil if user is not root user.")
#+end_src

*** Resolution Testing
#+begin_src emacs-lisp
  (defvar display-1280x800-p   (and (= (display-pixel-width) 1280) (= (display-pixel-height) 800))
    "Return nil if current display's resolution is not 1280x800")

  (defvar display-1280x1024-p  (and (= (display-pixel-width) 1280) (= (display-pixel-height) 1024))
    "Return nil if current display's resolution is not 1280x1024")

  (defvar display-1920x1080-p  (and (= (display-pixel-width) 1920) (= (display-pixel-height) 1080))
    "Return nil if current display's resolution is not 1920x1080")
#+end_src

** Package Manager

*** el-get
#+begin_src emacs-lisp
  (require 'coldnew-core)
  (setq-default el-get-dir emacs-lisp-dir)
  (require 'el-get)
  (add-to-list 'el-get-recipe-path emacs-recipes-dir)
#+end_src

**** Auto Mode Alist
#+begin_src emacs-lisp
  ;; Make el-get recipes in emacs-lisp-mode
  (add-to-list 'auto-mode-alist '("\\.rcp$" . emacs-lisp-mode))
#+end_src
*** ELPA
#+begin_src emacs-lisp
  (setq-default package-user-dir emacs-elpa-dir)
  (require 'package)
  (setq package-archives
        '(("ELPA" . "http://tromey.com/elpa/")
          ("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.milkbox.net/packages/")))
#+end_src

* Macro
macro file
* Advice
advice file
* Function
function file
* Editor
This section contains my editor state

* Mode

** emacs-lisp-mode
** c-mode
** c++-mode
** org-mode
* Command
All command file

* End of file
** TODO remove one day
#+begin_src emacs-lisp
  (provide 'coldnew-emacs)
#+end_src
