#+TITLE: coldnew emacs config
#+AUTHOR: coldnew
#+email: coldnew.tw at gmail.com
#+STARTUP: content indent align 


* Basic Setup
** User-interface
*** Startup Message
Do not use startup messages.
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)
#+end_src
*** Scratch Message
Make scratch buffer contain nothing.
#+begin_src emacs-lisp
  (setq initial-scratch-message "")
#+end_src
*** Visible bell
Use visible bell instead of ring-bell.
#+begin_src emacs-lisp
  (setq visible-bell t)
#+end_src
*** Tool bar
Disable toolbar
#+begin_src emacs-lisp
  (if (featurep 'tool-bar) (tool-bar-mode -1))
#+end_src
*** Scroll bar
Disable scrollbar
#+begin_src emacs-lisp
  (if (featurep 'scroll-bar) (scroll-bar-mode -1))
#+end_src
*** Cursor
#+begin_src emacs-lisp
  (blink-cursor-mode -1)
#+end_src
*** Menu-Bar
#+begin_src emacs-lisp
  (menu-bar-mode -1)
#+end_src
*** Time Stamp
#+begin_src emacs-lisp
  (setq time-stamp-active      t ) ; do enable time-stamps
  (setq time-stamp-line-limit 10 ) ; check first 10 buffer lines for Time-stamp:
  (setq time-stamp-format "%04y-%02m-%02d %02H:%02M:%02S (%u)") ; date format
#+end_src
*** TODO Misc
add comment for this section
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
#+begin_src emacs-lisp
  ;; TODO: add comment
  (setq stack-trace-on-error t)
  (setq imenu-auto-scan t)
  ;;(setq redisplay-dont-pause t)

  ;; xrelated srtting
  (setq x-select-enable-clipboard t)
  (setq select-active-regions t)
  (setq x-gtk-use-system-tooltips nil)    ; disable gtk-tooltip

  (setq max-lisp-eval-depth '40000)
  (setq max-specpdl-size 5)  ; default is 1000, reduce the backtrace level
  (setq debug-on-error t)    ; now you should get a backtrace
#+end_src
#+begin_src emacs-lisp
  ;; nice scrolling
  (setq scroll-margin                   0 )
  (setq scroll-conservatively      100000 )
  (setq scroll-preserve-screen-position 1 )
  (setq scroll-up-aggressively       0.01 )
  (setq scroll-down-aggressively     0.01 )
#+end_src

** Variable
*** Emacs Config Variables
#+begin_src emacs-lisp
  (defvar emacs-dir "~/.emacs.d/"
    "The top-level emacs-configure directory.")
  (defvar emacs-config-dir (concat emacs-dir "config/")
    "directory to place emacs configure.")
  (defvar emacs-themes-dir (concat emacs-dir "themes/")
    "directory to place emacs theme.")
  (defvar emacs-lisp-dir   (concat emacs-dir "lisp/")
    "directory to place lisp packages from internet.")
  (defvar emacs-elpa-dir   (concat emacs-lisp-dir "elpa/")
    "directory to place ELPA lisp packages from internet.")
  (defvar emacs-snippets-dir (concat emacs-dir "snippets/")
    "directory to place yasnippet files.")
  (defvar emacs-recipes-dir (concat emacs-dir "recipes/")
    "directory to place local el-get recepies.")

  (defvar emacs-custom-file (concat emacs-dir "custom.el")
    "store customize UI config.")

  (defvar emacs-bin-dir    (concat emacs-dir "bin/")
    "directory to place binary staff.")
  (defvar emacs-cache-dir  (concat emacs-dir "cache/")
    "cache file directory.")
  (defvar emacs-backup-dir (concat emacs-dir "backup/")
    "directory to backup files.")
  (defvar emacs-authinfo-file (concat emacs-dir ".authinfo.gpg")
    "file that save secret")

  ;; (defvar emacs-log-dir (concat emacs-var-dir "log/")
  ;;   "log file directory."
#+end_src

**** Shell
#+begin_src emacs-lisp
  (defvar emacs-default-shell "/bin/bash"
    "Default shell for cemacs.")
  (defvar emacs-popup-shell-window-height 30
    "Window hight of popup shell.")
  (defvar emacs-popup-shell-window-position "bottom"
    "Make popup shell window at buttom by default.")
#+end_src

**** Path
#+begin_src emacs-lisp
  ;; TODO: make it work on every platform, now only has Linux support
  (setenv "PATH"
          (concat
           emacs-bin-dir ":"
           "~/.lein/bin" ":"
           (getenv "PATH")
           ))

  (setq exec-path (cons emacs-bin-dir exec-path))
#+end_src

**** TODO Remember to remove
#+begin_src emacs-lisp
  (defun change-mouse-to-left ()
    (interactive)
    (shell-command "xmodmap -e \"pointer = 3 2 1\""))

  (defun change-mouse-to-right ()
    (interactive)
    (shell-command "xmodmap -e \"pointer = 1 2 3\""))

  (defun swap-ctrl-caps ()
    "swap control and capslock"
    (shell-command "setxkbmap -option ctrl:swapcaps"))

  (defun make-caps-as-ctrl ()
    "make capslock as control-key"
    (shell-command "setxkbmap -option ctrl:nocaps"))

  ;; only disable capslock and make it as control
  (cond ((eq window-system 'x)
         ;; make caps lock a control key
         (make-caps-as-ctrl)
         (change-mouse-to-left)))
#+end_src

*** Operation System Testing
#+begin_src emacs-lisp
  (defvar mac-p     (eq system-type 'darwin)
    "Return nil if OS is not Mac.")
  (defvar linux-p   (and (eq system-type 'gnu/linux) (not (eq system-type 'drawin)))
    "Return nil if OS is not Linux.")
  (defvar cygwin-p  (eq system-type 'cygwin)
    "Return nil if OS is not CygWin.")
  (defvar windows-p (eq system-type 'windows-nt)
    "Return nil if OS is not Windows.")
  (defvar linux-64bit-p (and (string-match (rx bos "x86_64") system-configuration) linux-p)
    "Return nil if OS is not 64-bit linux.")
    (defvar linux-32bit-p (and (string-match (rx bos "x86-") system-configuration) linux-p)
    "Return nil if OS is not 32-bit linux.")
#+end_src

*** User Testing
#+begin_src emacs-lisp
(defvar root-p (zerop (user-real-uid))
  "Return nil if user is not root user.")
#+end_src

*** Resolution Testing
#+begin_src emacs-lisp
  (defvar display-1280x800-p   (and (= (display-pixel-width) 1280)
                                    (= (display-pixel-height) 800))
    "Return nil if current display's resolution is not 1280x800")

  (defvar display-1280x1024-p  (and (= (display-pixel-width) 1280)
                                    (= (display-pixel-height) 1024))
    "Return nil if current display's resolution is not 1280x1024")

  (defvar display-1920x1080-p  (and (= (display-pixel-width) 1920)
                                    (= (display-pixel-height) 1080))
    "Return nil if current display's resolution is not 1920x1080")
#+end_src

** Package Manager
*** el-get
#+begin_src emacs-lisp
  (setq-default el-get-dir emacs-lisp-dir)
  (require 'el-get)
  (add-to-list 'el-get-recipe-path emacs-recipes-dir)
#+end_src
**** Auto Mode Alist
#+begin_src emacs-lisp
  ;; Make el-get recipes in emacs-lisp-mode
  (add-to-list 'auto-mode-alist '("\\.rcp$" . emacs-lisp-mode))
#+end_src
*** ELPA
#+begin_src emacs-lisp
  (setq-default package-user-dir emacs-elpa-dir)
  (require 'package)
  (setq package-archives
        '(("ELPA" . "http://tromey.com/elpa/")
          ("gnu" . "http://elpa.gnu.org/packages/")
          ("marmalade" . "http://marmalade-repo.org/packages/")
          ("melpa" . "http://melpa.milkbox.net/packages/")))
#+end_src

* Macro
macro file
* Advice
advice file
* Function
function file
* Editor
This section contains my editor state

* Mode

** emacs-lisp-mode
** c-mode
** c++-mode
** org-mode

*** Conflict Fix
some packages conflict with org-mode
**** yasnippet
#+begin_src emacs-lisp
  (when (featurep 'yasnippet
  (add-hook 'org-mode-hook
            (lambda ()
              (org-set-local 'yas/trigger-key [tab])
              (define-key yas/keymap [tab] 'yas/next-field-group)))))
#+end_src

* Command
All command file

* Alias
#+begin_src emacs-lisp
  (defalias 'coldnew/set-mark-command 'cua-set-mark-or-rectangle-mark)
  (defalias 'coldnew/folding-toggle   'toggle-selective-display)
#+end_src
* Global keybinding

** Unset key
#+begin_src emacs-lisp
  (global-unset-key (kbd "C-x e"))
  (global-unset-key (kbd "C-x d"))
#+end_src

** Function key prefix

*** F1
#+begin_src emacs-lisp
  (global-set-key (kbd "<f1>")     'woman)
#+end_src

*** F2
#+begin_src emacs-lisp
  (global-set-key (kbd "<f2>")     'shell-pop)
#+end_src

*** F3
#+begin_src emacs-lisp
  (global-set-key (kbd "<f3>")     'call-last-kbd-macro)
#+end_src

*** F4
#+begin_src emacs-lisp
  (global-set-key (kbd "<f4>")     'sr-speedbar-toggle)
#+end_src

** Ctrl Prefix

*** Default Emacs keybinding
#+begin_src emacs-lisp
  (global-set-key (kbd "C-n") 'next-line)
  (global-set-key (kbd "C-p") 'previous-line)
  (global-set-key (kbd "C-b") 'backward-char)
  (global-set-key (kbd "C-f") 'forward-char)
  (global-set-key (kbd "C-e") 'move-end-of-line)
  (global-set-key (kbd "C-a") 'move-beginning-of-line)
#+end_src

*** Delete
#+begin_src emacs-lisp
  (global-set-key (kbd "C-l") 'hungry-delete-backward)
  (global-set-key (kbd "C-d") 'hungry-delete-forward)
  ;;(global-set-key (kbd "C-u") 'backward-kill-line)
#+end_src

*** Misc
#+begin_src emacs-lisp
  (global-set-key (kbd "C-;") 'iedit-mode)
  (global-set-key (kbd "C-v") 'coldnew/set-mark-command)
  (global-set-key (kbd "C-/") 'undo-tree-undo)
  (global-set-key (kbd "C-]") 'coldnew/toggle-state)
#+end_src

** Ctrl-x Prefix

*** Misc
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-f")  'lusty-file-explorer)
  (global-set-key (kbd "C-x C-b")  'ibuffer)
  (global-set-key (kbd "C-x b")    'coldnew/helm-filelist)
  (global-set-key (kbd "C-x C-d")  'dired)
  (global-set-key (kbd "C-x C-r")  'sudo-edit)
  (global-set-key (kbd "C-x vv") 'egg-next-action)
  (global-set-key (kbd "C-x M-x") 'helm-M-x)
  (global-set-key (kbd "C-x o")   'switch-window)
  (global-set-key (kbd "C-x C-l") 'recenter-top-bottom)
  (global-set-key (kbd "C-x C-n") 'auto-complete)
  (global-set-key (kbd "C-x C-s") 'save-buffer-always)
  (global-set-key (kbd "C-x f") 'fullscreen-window)
#+end_src

** Ctrl-c prefix
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c C-h") 'coldnew/folding-toggle)
#+end_src

** Ctrl-Meta Prefix
#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-,") 'beginning-of-buffer)
  (global-set-key (kbd "C-M-.") 'end-of-buffer)
  (global-set-key (kbd "C-M-n") 'scroll-other-window)
  (global-set-key (kbd "C-M-p") 'scroll-other-window-down)
#+end_src

** Meta Prefix

*** Default Emacs keybinding
#+begin_src emacs-lisp
(global-set-key (kbd "M-f") 'forward-word)
(global-set-key (kbd "M-b") 'backward-word)
(global-set-key (kbd "M-e") 'forward-sentence)
(global-set-key (kbd "M-a") 'backward-sentence)
#+end_src

*** Misc
#+begin_src emacs-lisp
  (global-set-key (kbd "M-s") 'coldnew/helm-occur)
  (global-set-key (kbd "M-l") 'backward-delete-word)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "M-n") 'scroll-up)
  (global-set-key (kbd "M-p") 'scroll-down)
  (global-set-key (kbd "M-g") 'linum-ace-jump)
  (global-set-key (kbd "M-v") 'er/expand-region)
  (global-set-key (kbd "M-q") 'coldnew/switch-to-command-mode)
  (global-set-key (kbd "M-/") 'undo-tree-redo)
  (global-set-key (kbd "M-.") 'helm-etags+-select-one-key)
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "M-1") 'delete-other-windows)
  (global-set-key (kbd "M-2") 'split-window-below)
  (global-set-key (kbd "M-3") 'split-window-right)
  (global-set-key (kbd "M-4") 'delete-window)
  (global-set-key (kbd "M-0") 'other-window)
  (global-set-key (kbd "M-j") 'switch-window)
#+end_src

** Shift prefix
#+begin_src emacs-lisp
  (global-set-key [(shift return)] 'insert-empty-line)
#+end_src

** Other
#+begin_src emacs-lisp
  (global-set-key (kbd "<delete>") 'hungry-delete-forward)
  (global-set-key (kbd "C-.") 'repeat)
  (global-set-key (kbd "%") 'match-paren)
#+end_src
* End of file
** TODO remove one day
test
#+begin_src emacs-lisp
     (provide 'coldnew-emacs)
#+end_src


